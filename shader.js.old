
function loadShader(gl, type, source) {
    const shader = gl.createShader(type);
    
    // Send the source to the shader object
    gl.shaderSource(shader, source);
    // Compile the shader program
    gl.compileShader(shader);
    
    // See if it compiled successfully
    
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
    }
    
    return shader;
}


function Shader(gl,vsSource,fsSource) {
    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);

    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
        return null;
    }

    return shaderProgram; 
}


function Shader(context) {
    this.gl = context;
    this.ID = null;

    //Optional for rebinding of WebGL context
    this.bindGLContext = function(gl) {
        this.gl = gl;
    };

    //Helper fxn for compiling individual shader
    const loadShader = function(type,source) {
        const shader = this.gl.createShader(type);
        this.gl.shaderSource(shader,source);
        this.gl.compileShader();
        if (!this.gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert("Compilation error: "+gl.getShaderInfoLog(shader));
            this.gl.deleteShader(shader);
            return null;
        }
        return shader;
    };

    //Side effects: updates shader program within instance
    this.attachSource = function(vsSource, fsSource) {
        const vShader = loadShader(gl.VERTEX_SHADER,vsSource);
        const fShader = loadShader(gl.FRAGMENT_SHADER,fsSource);

        this.ID = gl.createProgram();
        this.gl.attachShader(this.ID, vShader);
        this.gl.attachShader(this.ID, fShader);
        this.gl.linkProgram(this.ID);

        if (!this.gl.getProgramParameter(this.ID, gl.LINK_STATUS)) {
            alert("Unable to initialize the shader program: "+gl.getProgramInfoLog(this.ID));
            return null;
        }
        return this.ID;
    };

    this.shaderIsAttached = () => this.ID != null;

    

}


